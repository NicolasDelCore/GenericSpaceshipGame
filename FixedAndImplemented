Fixed and implemented, Alpha 1.2:
Implementation: particle effect for when the player or enemy moves.

Bug 36: Movement particle effect "restarts" mid-air (all particles created dissappear, this is noticeable only for less than a second since the particles are recreated quickly).
-When passing through the map borders, the particles were not being captured by the cameras due to being in the wrong layer.
Fix: Moved the "particlesEngine1" and "particlesEngine2" game objects (particle emitters) to the "player" / "enemy" layers and "lasers" sorting layer.
-The "Sprite/Default" shader in the material of the render textures wouldn't reproduce the particles.
Fix: Changed the shader to FX/Flare. This works exactly as before, with the addition that now the particles are shown in the material/shader.

Implementation change, playerMovement: Improved the playerMovement script so that it is more readable. (Privatized some variables like "rb" and "moveSpeed", moved blocks of code running in Update to independant functions that are now called in Update, such as "movementInput", "movementAction" or "amIAlive", deleted some unusued variables, standarized indentation).
Implementation change, playerMovement: To control when the particles related to movement are shown, a new function (amIMoving) was introduced. This function checks if there's input for movement or not. If there is, the particle effect is reproduced, otherwise it's not.

Bug 37: Sometimes the movement-particles will play when the enemy was stationary.
-Instead of comparing the value X of the enemy's position to the value X of the playerLasPos gameobject's position, it was being compared against its Y value. This provoked that sometimes the outcome wouldn't be the one expected. (The desition of whether to play the paticle effect or not is taken based on if the sustraction of enemy's X - playerLastPos' X is > 1 or is <-1).
Fix: Fixed the code error. X value of the enemy's position is now compared only against the X value of the playerLastPos gameobject, and the same applies for the Y value.

Implementation: new type of enemy, Tracker, it's a blue enemy with a teleporting-power: if the player is about to loose this enemy, it'll teleport to the player's position

Implementation change, Tracker-enemy: adjusting the distance the enemy is teleported from the player to be a bit further away (otherwise the player dies too quickly, as there are sometimes where dodging the bullet of the recently-teleported enemy is impossible).

Implementation change, Tracker-enemy: shoots slower than normal enemy.

Bug 38: When killing a teleporting-enemy, the teleporting particle effect will spawn in the player's position.
-This happens because all enemy-child objects are destroyed when the enemy itself is destroyed, so the player is no longer within enemyVision, thus the player is lost and the particle effect spawns (eventhough the enemy itself is dead and won't teleport to the player's position).
Fix: Particle effect will only spawn if the enemy is still alive.

Bug 39: If the player is right in front the enemy (collision boxes touching), the enemy-shots will do a lot more damage (20, 40, 50 in some cases per single shot). This is unexpected, it should be 10 HP only.
-Since the bullet spawns partially or completely within the player's collision box, multiple collisions are detected.
Implementation change, bullet damage: Moved the damage caused by enemy bullets from the playerMovement script to the enemyBullet script.
Fix: Introduced a new variable that verifies if this bullet has collided with the player or not (collisionDetected, which will be False when the bullet spawns). Damage will only take place if collisionDetected is false, it'll be switched to True if the collision with the player took place, thus duplicate collisions won't cause damage.

Bug 40: If the enemy is right in front the player (collision boxes touching), the player-shots will do a lot more damage (20, 40, 50 in some cases per single shot). This is unexpected, it should be 10 HP only.
-Since the bullet spawns partially or completely within the enemy's collision box, multiple collisions are detected.
Implementation change, bullet damage: Moved the damage caused by player bullets from the enemyIA script to the bullet script.
Fix: Introduced a new variable that verifies if this bullet has collided with the enemy or not (collisionDetected, which will be False when the bullet spawns). Damage will only take place if collisionDetected is false, it'll be switched to True if the collision with the player took place, thus duplicate collisions won't cause damage.

Bug 41: Unity message: Some shots would return a message stating that the instance of an object was missing during collision. This was only an alert that would be visible within the Unity GUI, not having any impact on the gameplay.
Fix: Changed the variable "enemy" (that stores the enemy instance) value from collision.collider.gameObject to simply collision.gameObject. This fixed the alert.

Implementation: new type of enemy, Captain-enemy: it's a red enemy with double the life of the normal enemy (40 HP instead of 20). It shoots slower than the normal enemy type (same shoot-rate as the Tracker enemy).
Implementation: new type of enemy, Reinforcement-enemy: it looks like the normal, with some red-markings, and it behaves like the normal enemy, except that it won't respawn on dead. These are meant to be spawned only by the Captain enemy type.
Implementation: Captain spawn behavior: When it's life is at 20, it'll spawn 2 reinforcement ships.

Implementation change, enemies on the map: There will be 6 enemies in the map spawning naturally (at the beggining of the game and through the spawnerScript), 4 normal enemies, 1 Tracker enemy and 1 Captain enemy (note, the Captain enemies can spawn 2 enemies of type Reinforcement, increasing the possible total amount of enemies from 6 to 8).
Implementation change, Tracker's enemyVision: enlarged the enemyVision zone for the Tracker enemy, also placed the Tracker enemy in the middle of enemyVision, so that the teleporting-effect is better.

Bug 42: Killing a Tracker enemy will spawn a Tracker and a Normal enemy as well, instead of just a Tracker.
-It was a problem with how the if/else statements were ordered in the spawnerScript.
Fix: Rearranged the if/else statements in the spawnerScript to make sure that only one enemy spawns. First we check if a Tracker died, if it was, we spawn a Tracker, otherwise, we check if the enemy that died was of type Captain or not. Then we spawn either a Normal enemy or a Captain enemy.

Implementation: Sound (music, laser SFX, explosion SFX).
Implementation: Options menu (regulates sound FX, video resolution and fullscreen/windowed mode, and if you're in the Main Menu, you can choose to disable or enable the Radar before the game begins).

====================================================================================================

Fixed and implemented, Alpha 1.1:

Bug 14: In-Menu tutorial instructs you to use "right click" instead of "left click" to shoot.
Fix: Corrected the phrase.

Bug 15: From the player's point of view, enemies could sometimes "jump" a few centimeters closer or further away
-The teleporting-transition for the player would produce this effect, because of its large collision box teleporting the sprite right away when touching the teleporting zone
-Previous line also applies for the enemy's collision box / teleporting transition.
Fix: Created a new, much smaller collision box, which is only used for teleporting (instead of using the same hitbox for collisions and shots), then modified the mapBorders script to teleport based on this new tp-specific collision box. This smoothen the teleporting transition a lot as the sprite needs to be deep into the teleporting zone before its teleported away.
-This fix generated a very similar bug with the same behavior, that would trigger less often. The problem here was that the enemy's collision box was still in charge of changing the teleporting bool state.
Fix: The teleporting bool is no longer affected by the enemy's collision box, but by the enemyTPbox. (This bool is defined in the EnemyIA script, but modified by the mapBorders script when teleportation happens).

Bug 16: Enemies will move forever in a straight line, generally with the wrong rotation, until the player gets them out of that loop.
-After implementing the smaller TPboxes in the enemies, sometimes the playerLastPos object (which is what the enemy follows in reality) will get stuck in the middle of a mapBorder. This is specially noticeable when there's more than one enemy at the same time. Quite often, they'll move with the wrong rotation too (as the last place where the player was observed differs from the place where the playerLastPos gameobject physically is).
Fix: Corrected a tagging issue in the enemy prefab used. The enemyTPBox was tagged properly in the original enemy game object, but it wasn't tagged in the enemy prefab (used to spawn new enemies). This was making it so that the teleporting bool would always be false in new/additional enemies.

Implementation: Implemented a set of cameras and render-textures to reflect what's happening in the opposite side of the map.
-When the player crosses a map-border, if an enemy was nearby, it would dissappear.
-Now there are a couple cameras and render-textures following the player through the X and Y axis, so if the player passes through a map border and there's an enemy nearby, this enemy will be captured by a camera and reflected at the other side within the render-texture.

Bug 17: Non-visible for players; Unity warnings.
-The horizontal and vertical cameras / reflected textures that follow the player around will still try to get its position even after the player dies.
-Previous changes in the code (reimplementation of the horiz and vert cameras, name changes, gameobject changes, etc) made it so that the isPlayerAlive bool would never be updated in the horizCamPlayerFollow and vertCamPlayerFollow scripts.
-Fix: Fixed this by referencing the correct gameobjects in the playerMovement script.

Bug 18: No teleporting happening or coordinates being wrong.
-Teleport wouldn't work unless Vector3 was used for calculations. (This was actually a pre-alpha bug, but I forgot to document it before).
Fix: Swapped the Vector2 variables for Vector3s in the teleporting code.

Bug 19: Enemy goes crazy sometimes.
-Gets trapped in a teleporter-loop.
Fix: It was a collision-box problem when adjusting the teleporting distance for the player. Implemented a different teleporting coordinates for the enemies.

Bug 20: Sometimes there's a sudden change in the enemy texture and it looks bad (it changes from high def to low def).
-There's a set of cameras capturing what happens in one side of the map and reflecting it on the other side. The reflected textures look bad.
Fix: Increased the resolution of the texture (from 256x256 to 1500x1500 - Note: I did try smaller resolutions like 1024x1024 but the difference was still noticeable).

Bug 21: Enemy not being very good at following the player.
-Enemy isn't good passing through the mapborders when the player is really close.
Fix: Added a new check in the PlayerLastPos script's Update function: if the player was found and then it teleported, playerLastPos = followUp pos (the enemy starts its followUp mechanic)

Bug 22: Enemy will sometimes not follow the player correctly, moving to a different place instead.
-In reduced occasions, if the enemy is very near to a map border and the player passes through quickly enough, some flags will remain true when they shouldn't (in EnemyIA: Follow Up, Has Player Teleported in EnemyIA, in findingPlayerLastPos: Follow Up and Second Follow Up), making the enemy move sideways throughout the map border until it teleports a couple of times (which takes it out of the movement loop).
Fix: the findingLastPlayerPos script will now turn the hasPlayerTeleported flag in the enemyIA script to false when necessary.

Bug 23: Sometimes, for a fraction of a second, the the upper part of the enemy sprite gets cutted in half.
-Possible explanation: The reflected textures are not being drawn correctly after having implemented the TPbox in the enemies.
Fix: Enlarged the border cameras and reflected textures (camera size increased from 14 to 16, reflected textures from 2.79 to 3.2 in X and Z axis).

Bug 24: Radar will sometime draw the enemies (red dots) outside of the radar itself.
-The texture used for the radar had some transparent edges, the enemies were being drawn there.
Fix: Sliced the transparencies and changed the radar texture. Additionally, made the radar part of the UI so that its positioning is more consistent with the rest of the UI elements (for testing purposes, the radar was introduced as a script within the player-gameobject).

Bug 25: Some UI elements (Life, Score and Timer) will only look good in 1024x768 resolution.
-These elements were using the wrong anchors within the UI Canvas (unlike the radar, which has its position fixed within the radar script).
Fix: Changed the anchors from center to top-left for these elements within the UI Canvas. Now they should keep the same position relative to the screen no matter the resolution used.

Bug 26: Radar's size was inconsistent when testing different screen resolutions.
-The radar's script adjust its size based on the screen size.
Fix: Fixed the size to 100x100.

Bug 27: Sometimes, if the player is too close, enemy shots will go right through the player.
-The enemy's firepoint was a little bit far, so the player could get between the enemy's collision box and the firepoint object (where the bullet spawns), effectively ignoring the shots from that enemy.
Fix: Reduced the distance between the enemy's collision box and the firePoint object.

Implementation change: Timer is now hidden while playing (too big and too distracting), it'll be displayed on the death screen. Adjusted UI accordingly.

Implementation change: Preparing the game to look "good" in as many resolutions as possible. (Resolutions lower than 640x480 - which is only posible through manually re-sizing the game window, will look somewhat bad because the player-UI won't resize). 

Implementation change: GameUI (radar, HP and Score) now hides when the player dies.

Implementation change: The deathScreen now shows the Score obtained (since the GameUI is hidden when you're dead).

Implementation change: Instead of only one enemy, there'll be 7 enemies on screen at all times.

Implementation change: Since there's more enemies in screen, increased the player HP from 30 to 100. (Also changed the UI text "Lifes" to "HP", because it describes the functionality better).

Bug 28: Bullets sometimes go through the enemies.
-Given the many changes applied to how the mapBorders work, these are not teleporting bullets anymore.
Fix: Changed the mapBorders script so that bullets are teleported again.
Implementation change: Also reduced the size of the bullets to avoid collision problems with the borders and because this way look better overall.

Bug 29: Editor error. Non visible for the player.
-If an enemy spawns at the exact same moment as the player dies, Unity will return one NullReferenceException error because the Start function of the enemy tries to find the player. This doesn't affects the gameplay/application.
"NullReferenceException: Object reference not set to an instance of an object
enemyIA.Start () (at Assets/enemyIA.cs:38)"
Fix: The code for getting the player's position was storing the player's transform set into a variable called "player" (player = GameObject.Find("spaceship-player").transform), I changed that so that it uses the player gameobject entirely (playerGO = GameObject.Find("spaceship-player") and the transform element will be accessed later when needed (playerGO.transform.position.x for example). I haven't been able to forcefully reproduce this NullReference error since, so the problem must have been trying to store a transform set that no longer exists (null) from a destroyed object, rather than trying to store the already-destroyed object itself (the garbage collector either passes after the newly spawned enemy got the spaceship-player value stored, or before the enemy even spawns, so when the enemy spawns, eventhough the player was destroyed, the information of the destroyed object can still be accessed).
Note: Some great info about Unity's/C#'s garbage collector behavior and null & destroyed object differences can be found here https://jacx.net/2015/11/20/dont-use-equals-null-on-unity-objects.html

Bug 30: Sometimes, enemies "pop in and out of existance".
-If the player is in a corner of the map, the opposite corner won't be reflected. For example: if you get to a corner of the map and then move in an "L" form, you'll teleport horizontally and vertically through the map borders (you'll tp from one corner to the other basically). When this happens, the cameras loose whatever object was in the opposite corner and find the objects of the new corner, so objects in this situation will still appear and disappear seemingly at random.
Fix: Implemented a new camera (loneCam) and texture (loneTexture). These will always be in opposite corners to each other and their position will vary depending on where on the map is the player (the cam will always be in the corner opposite to the player, while the texture will be in the same area as the player). This covers the blind corner left by the original set of cameras that follow the player.

Bug 31: Sometimes bullets will suddently "jump" a bit to the side from their normal trajectory.
-The bullet went through two different map borders and this deformed its trajectory, which can be seen in the reflected-textures.
Fix: Implemented a smaller collision box for teleporting (same as with the player and enemies). Bullets should always go in a straight-line now.

Bug 32: Enemy sometimes won't see the player.
-Enemy can't see the player through the map borders (because what the player really sees at that point is just a reflection of the enemy sprite).

Implementation change, minor code optimization in EnemyIA: Swapped some things from the Update function to independant functions in the enemyIA script (mostly for major clarity while reading the code)

Bug 33: When more than one enemy is on screen, sometimes it'll follow the player or move with the wrong rotation.
-It happens because it's programmed to look in the player's direction but it moves following the playerLastPos object (so it can effectively move in one direction while looking at a different direction).
-Note: After recent implementations (probably the enemyZone and enemyTP fixes), I haven't noticed the following issue again. But a fix is still necessary given that newer code that I'm planning on implementing will very likely require the enemy to move in other directions while the player isn't in sight (say, back and forth).
Fix: Implemented a code that, if the playerFound flag is false, the enemy will look in the direction of the playerLastPos gameobject (and because it'll always move towards this gameobject, it'll be always looking either in the direction of the player when playerFound is true, or towards the direction it's moving to).

Bug 34: Bullets dissappearing mid-air, doing damage but not showing their hit-effect or sprite.
-It was an error in the mapBorders script. Instead of modifying the bullet position (parent object), only the player/enemy-bullet-tp collision box was being teleported (the code used trigger.transform.position instead of trigger.transform.parent.position).
Fix: Code fixed (if the player/enemy-tp-bullet collision box is detected, the whole bullet is teleported). The visuals now behave as originally intended after the bullet passes through a map border.

Implementation: Detecting player through the map borders
Bug 35: The player would see the enemy standing still despite being very close to it / right in front of it.
-The enemy couldn't "see" beyond the map borders.
Fix: Every enemy now has a set of "enemyVision" triggers (enemyZoneX, enemyZoneY, enemyZoneLoneCorner). Note: This is similar to the camera-set solution for seeing enemies across the map borders.

====================================================================================================

Fixed and implemented, Pre-Alpha & Alpha 1.0:

Notes, each time a line starts with:
Implementation: Something new has been added.
Implementation change, xxxxx: Something already implemented has been reworked, changing the way it functions (whether to fix a major problem, improve on the feature or give it a new functionality).
Bug #: A description of how the bug looks like from the player's perspective.
a) b) c) (and so on): A description of how the bug looks like from the player's perspective, but these pointers are used when more than one bug either have the same cause or is fixed by the same fix.
-Lines starting with dashes explain the causes of a bug.
Fix #: A description of the fix implemented.

Implementation: Sprites.
Implementation: Player movement (aims in the direction of the mouse, moves with AWSD or arrow keys) in playerMovement script.
Implementation: Player shooting & particle effect on impact. There are two scripts for this: shooting and bullet. Shooting contains the force the bullet is suppoused to have on spawn and also instantiates the bullet itself. The bullet script destroys the bullet when a) it collides with something, or b) when a 1-second timer expires, it also contains the particle effect to be used on bullet impact/expiration. The bullets spawn from the firePoint gameobject, a child object to the player (it's an empty gameobject, just to mark where the bullet is suppoused to spawn).
Implementation: Copied player code to rotate, applied it to the enemyIA script. Instead of rotating to point to the mouse, the enemy will rotate to point to the player when the player enters the enemyVision zone.
Implementation: Copied the player-bullet script, changed its sprite and renamed it enemy-bullet. Copied the player shooting code & and applied it to the enemyIA and the enemy-bullet. Now, when the player enters the enemyVision zone, the flag playerFound is set to true, and the enemy will start shooting (and since it's already looking in the direction of the player, the enemy bullets will go in that direction, as the enemy-bullet spawn point is in front of the enemy).
Implementation: Enemies move based on AddForce. When the player is found, they move towards the player, but movement isn't very nice.
Implementation change, PathFinder script: in order to trace the path from the enemy to the player and move the enemy more smoothly, I've decided to implement the pathfinder script (which was faster than creating a new script, and also free). The enemies were trying to take the exact same position as the player, so to change this and have more control about where the enemy goes, I've attached a child gameobject called playerLastPos to the enemy. This gameobject has a script to update its position based on different circumtances. When the player is within the enemyVision zone, playerLastPos takes the player position, so the enemy moves towards the player. When the player is outside of the enemyVision zone (playerFound = false in the enemyIA script), playerLastPos takes the position of the enemy, so the enemy stops moving. 
Implementation: Map borders were momentarily solid during this early testing. I replaced the solid collision boxes with triggers and now the player and the enemies teleport to the opposite side of the map when hitting a map border.

Bug 1: Enemy turning around and choosing a larger path to the player.
-If the player just teleported through a map-border, the player position wasn't lost fast enough by the enemyIA script, so PlayerLastPos object (that points the enemy where to go) was getting the player position from the other side of the map, making the enemy turn around to face the player and go in that direction instead of through the map border portal.
Fix 1: The enemy now has access to see the player.teleporting bool, when this bool is set to True, lastPlayerPos won't be updated and the enemy won't rotate to face the player.

Implementation change, map borders: Previously, the teleport instructions were within both the playerMovement and enemyIA scripts (so the borders of the map were just script-free triggers). I moved the teleporting instructions to a script in each wall. Then I decided to simplify and unify the four scripts into one script that could be applied to the four walls at the same time (mapBorders script), as to avoid having to modify 4 scripts each time I wanted to make a change to the way the map borders work.

Bug 2:
a) Enemies would randomly disappear and reappear even when chasing the player.
b) In some occasions, the enemy would start "blinking" a lot of times per second and randomly ignore the player bullets.
c) Bullets would disappear at certain places too.
-Bullets were getting teleported in the mapborders, thus you could step at a certain point and see the bullet disappear.
-The enemies would be teleported as soon as their enemyVision zone got in contact with the map border. Because of the size of the enemyVision zone, this could, in many cases, trap the enemy in question within a teleport-loop (they would teleport from one border to the other lots of times per second, visually blinking a lot and randomly ignoring player-bullets).
Fix 2: Within the mapBorders script, I added an "if" instruction to ignore triggerEnter and triggerExit events from the objects with name "enemyVision", "enemy-bullet(Clone)",  and "player-bullet(Clone)". This is so that the enemyVision trigger box is ignored, otherwise enemies would get trapped in a TP loop since the trigger box is too big. Bullets are now also ignored (instead of dissappearing, they pass through the trigger, this improves the illusion of going through an infinite space).

Implementation change, follow up: I added an empty game-object as child to the enemy game object. This empty game object, FollowUpPos, simply marks a point in front of the enemy. When the player is lost and the enemy reaches the last known position of the player (marked by the PlayerLastPos object), the PlayerLastPos object (which is what the enemy actually follows) will move to the FollowUpPos object's location once, making the enemy move forward like if it was still trying to chase after the player.

Bug 3: Sometimes, if the enemy is chasing the player and the player successfully escapes, the enemy will continue to traverse the same straight-line path forever (if undisturbed by the player).
-If the player escapes at just the right moment during a map-border-teleport, the PlayerLastPos gets stucked in the middle of (or beyond the) mapBorder trigger, making the enemy traverse the same straight path forever since it can't get to the PlayerLastPos object (because it's teleported to the other side of the map before that can happen, unless the player takes the enemy out of that loop by allowing himself to be detected, updating PlayerLastPos in the process).
Fix 3: Within the findingPlayerLastPos script (attached to the playerLastPos object), I included a check to see if the enemy's teleport flag is true or not (this flag is updated by the mapBorders script when the enemy object is detected). If the enemy teleport flag is true, the playerLastPos game object will be updated to the enemy's location. This prevents the playerLastPos GameObject from getting "stuck" in the teleporting map-borders (which would force the enemy to always travel the same path from border to border).

Bug 4: Sometimes, when the a) player or the b) enemy teleports from one mapborder to the other, for a split-second they'll be looking in the wrong direction.
a) In the case of the player looking at the wrong direction, it's because the player object teleports, but for that split second it'll detect the mouse as being behind it, and because the ship looks in the mouse direction, it'll flip before self-correcting after a few frames.
b) In the case of the enemy looking at the wrong direction, it's because it was chasing the player when it teleported, but the same concept as in point a) applies (the enemy will detect the player to be behind itself for a split-second, before self-correcting after a few frames).
c) Instead of following the player through the map border when the player is lost, the enemy just turns to the opposite side and moves forward.
-If the player just teleported, the followUp gameobject will point the enemy backwards instead of forward (into the teleporter). This is likely because the enemy is rotating to face the player right after this one is lost (for a split-second).
Fix: Rotation & movement is now disabled when teleporting. The player.teleporting and enemy.teleporting flags are now updated by the mapBorders script, these flags are set to true by triggerEnter and set to false by triggerExit. Within the playerMovement and enemyIA scripts, movement / rotation is disabled when these flags are true.

Bug 5:
a) Sometimes, the player will be unable to move.
-While being chased by the enemy, if the enemy went through the map borders at the exact moment, the player would be left in a "teleporting = true" state, so player wouldn't be able to move or rotate (unless the enemy pushed it towards a map border too).
b) Unity warning during dev about trying to access a destroyed object.
-If the enemy or enemy bullet is destroyed within a map border trigger at the right time, the map border trigger will try to access the object while it's being destroyed. Unity complains about this although it doens't represents a huge deal (it's simply a warning, but it only happens once and only if the object in question is destroyed at a exact place at a very specific time).
Fix: The problem here was that I thought it would be "better" if the mapBorder script saved the objects entering the trigger into variables, to reduce the <GetComponent> calls (as some places say that's a good practice). What was happening is that the mapborders script would cache (for example) the player entering the map border trigger, then before it could register the triggerExit event from the player, the enemy would take that value within the variable, so the triggerExit would never occur for the player, thus the teleporting bool wouldn't be set to false again. The same thing was provoking the warnings for the bullets/enemies being destroyed in the middle of the trigger zone. At the end of the day, and given the way these triggers access objects, it'll be more problematic and less benefitial to store the objects that go through in variables (specially considering the amount of bullets that could enter, exit and expire within the trigger).

Bug 6: Enemy tries to take the same position as the player, pushing the player forever. Pathfinder has a setting for stopping before reaching the objective, but it slowed down the following of the player by too much.
Fix: Implemented an enemyZone (like the enemyVision, but smaller). If the player enters this zone, the playerLastPos object will update its position to match the enemy's, preventing the enemy ships from pushing the player forever.

Bug 7: 
a) Sometimes, the enemy ship will stop following the player too soon. (Not really noticeable during gameplay).
-This happened because the player teleported. The followUp action would kick in early (before the enemy had reached the last position where the player was seen), making it travel a shorter distance than what its suppoused to travel.
Fix: Introduced a new flag in the enemyIA script, "hasPlayerTeleported". This bool will check the playerMovement script to see if the teleporting flag is true or not. If player.teleporting is true in the playerMovement script and if the playerFound flag is also true in the enemyIA script, hasPlayerTeleported will be set to true, and in that case, it'll turn the followUp flag in the enemyIA script to true as well. After the followUp action is done, the hasPlayerTeleported bool will be set to false by the findingPlayeterLastPos script (within the playerLastPos gameobject).

Bug 8:
-I'm including here all of "trying to access a destroyed object" errors that Unity prompted when either the enemy or the player was destroyed.
Fix: Introduced (and included where missing) a variable for each script that interacts with the player and/or the enemy to check if the entity in question is alive or not (isPlayerAlive / isEnemyAlive). These bools will be false when HP = 0 and true when not.

Implemented: Radar (script by Justin Zaun)

Bug 9: The radar would update the enemy position in the X axis, but not in the Y axis.
-The radar script was using X and Z axis to update itself (it was probably tailored for 3D I pressume).
Fix: Swapped the Z axis reference in the radar script for a reference to the Y axis.

Implemented: GUI, main menu
Implemented: GUI, pause menu
Implemented: GUI, death menu

Bug 10: If you paused the game, you were still able to spawn a new bullet (it would froze in spawn and die when the game was resumed).
Fix: Added a new bool to check if the game is paused or not. Added this to the player's shooting script and the enemyIA script.

Bug 11: If you died, then go to the main menu and then start a new game, the player wouldn't be able to move.
-The isPlayerAlive bool would not be updated, so the player would start a new game with that bool in false and couldn't move, but because its HP would be 30 instead of 0, the death menu wouldn't prompt either.
Fix: Starting a new game from the Restart button or from the main menu will always force the isPlayerAlive bool to be true, and the isGamePaused bool to be false.

Implemented: enemyPrefab (a prefab with the enemy object).
Bug 12: enemies spawned from enemyPrefab were quiet and doing almost nothing or moving weirdly.
-It wasn't working because the prefab would delink itself from certain objects (the player, the score system, the spawner).
Fix: I had to modify the enemyIA a bit to look for the problematic values on the Start() method (as soon as the object spawns basically). 

Bug 13: Strange enemy behaviors.
a) Enemy would move forever after the player was lost.
-The playerLastPos object was moving itself alongside the enemy ship, because it was a child object. During the followUp routine, the playerLastPos object is suppoused to take the position of the followUp gameobject, and then the enemy ship is suppoused to move there (following the playerLastPos object), but since playerLastPos was a child object, it would update its position with reference to the enemy ship (being pushed like if it was physically attached to the object), thus the enemy ship would move forward forever (unless the player stopped that loop by updating the playerLastPos position when found).
b) Weird movement patterns.
-The enemyZone trigger would get activated by the enemyVision trigger, despite being programmed to ignore it, and vice-verse. This was happening because the enemyZone was a child of the enemy ship object.
Fix: Both enemyZone and playerLastPos start as child of the enemy ship gameobject, but now in their Start() function, both have a instruction to unparent themselves from the enemy ship. This fixed the positioning and trigger activation issues for these objects.

Implemented: Spawner gameobject and spawner script. The spawner gameobject contains only a trigger area that encapsulates most of the map. The spawner script basically spawns enemyPrefabs at random within that trigger area (but only when an enemy dies, so there's always only 1 enemy in the map).
Implemented: Score system in inifnite mode. (GUI and script).
Implemented: Timer in infinite mode (tracks hours, minutes, seconds and milliseconds). (GUI and script).
Implemented: Player HP is now reflected in the GUI.
