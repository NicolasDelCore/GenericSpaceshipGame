Fixed and implemented, Pre-Alpha & Alpha 1.0:

Bug 1: Enemy turning around and choosing a larger path to the player.
-If the player just teleported through a map-border, the player position wasn't lost fast enough by the enemyIA script, so PlayerLastPos object (that points the enemy where to go) was getting the player position from the other side of the map, making the enemy turn around to face the player and go in that direction instead of through the map border portal.
Fix 1: The enemy now has access to see the player.teleporting bool, when this bool is set to True, lastPlayerPos won't be updated and the enemy won't rotate to face the player.

Implementation change, map borders: Previously, the teleport instructions were within both the playerMovement and enemyIA scripts (so the borders of the map were just script-free triggers). I moved the teleporting instructions to a script in each wall. Then I decided to simplify and unify the four scripts into one script that could be applied to the four walls at the same time (mapBorders script), as to avoid having to modify 4 scripts each time I wanted to make a change to the way the map borders work.

Bug 2:
a) Enemies would randomly disappear and reappear even when chasing the player.
b) In some occasions, the enemy would start "blinking" a lot of times per second and randomly ignore the player bullets. c) Bullets would disappear at certain places too.
-Bullets were getting teleported in the mapborders, thus you could step at a certain point and see the bullet disappear.
-The enemies would be teleported as soon as their enemyVision zone got in contact with the map border. Because of the size of the enemyVision zone, this could, in many cases, trap the enemy in question within a teleport-loop (they would teleport from one border to the other lots of times per second, visually blinking a lot and randomly ignoring player-bullets).
Fix 2: Within the mapBorders script, I added an "if" instruction to ignore triggerEnter and triggerExit events from the objects with name "enemyVision", "enemy-bullet(Clone)",  and "player-bullet(Clone)". This is so that the enemyVision trigger box is ignored, otherwise enemies would get trapped in a TP loop since the trigger box is too big. Bullets are now also ignored (instead of dissappearing, they pass through the trigger, this improves the illusion of going through an infinite space).

Bug 3: Sometimes, if the enemy is chasing the player and the player successfully escapes, the enemy will continue to traverse the same straight-line path forever (if undisturbed by the player).
-If the player escapes at just the right moment during a map-border-teleport, the PlayerLastPos gets stucked in the middle of (or beyond the) mapBorder trigger, making the enemy traverse the same straight path forever since it can't get to the PlayerLastPos object (because it's teleported to the other side of the map before that can happen, unless the player takes the enemy out of that loop by allowing himself to be detected, updating PlayerLastPos in the process).
Fix: Within the findingPlayerLastPos script (attached to the playerLastPos object), I included a check to see if the enemy's teleport flag is true or not (this flag is updated by the mapBorders script when the enemy object is detected). If the enemy teleport flag is true, the playerLastPos game object will be updated to the enemy's location. This prevents the playerLastPos GameObject from getting "stuck" in the teleporting map-borders (which would force the enemy to always travel the same path from border to border).

Bug 4: Sometimes, when the a) player or the b) enemy teleports from one mapborder to the other, for a split-second they'll be looking in the wrong direction.
-a) In the case of the player looking at the wrong direction, it's because the player object teleports, but for that split second it'll detect the mouse as being behind it, and because the ship looks in the mouse direction, it'll flip before self-correcting after a few frames.
-b) In the case of the enemy looking at the wrong direction, it's because it was chasing the player when it teleported, but the same concept as in point a) applies (the enemy will detect the player to be behind itself for a split-second, before self-correcting after a few frames).
Fix: Rotation & movement is now disabled when teleporting. The player.teleporting and enemy.teleporting flags are now updated by the mapBorders script, these flags are set to true by triggerEnter and set to false by triggerExit. Within the playerMovement and enemyIA scripts, movement / rotation is disabled when these flags are true.
